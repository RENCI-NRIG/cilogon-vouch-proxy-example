server {
  listen 443 ssl http2;
  server_name $host;
  root /var/www/html/;

  ssl_certificate /etc/ssl/fullchain.pem;
  ssl_certificate_key /etc/ssl/privkey.pem;

  # send all requests to the `/validate` endpoint for authorization
  auth_request /validate;

  location = /validate {
    # forward the /validate request to Vouch Proxy
    proxy_pass http://vouch-proxy:9090/validate;

    # be sure to pass the original host header
    proxy_set_header Host $http_host;

    # Vouch Proxy only acts on the request headers
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";

    ### AUTH REQUEST SET ###
    # optionally add X-Vouch-User as returned by Vouch Proxy along with the request
    auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

    # optionally add X-Vouch-IdP-Claims-* custom claims you are tracking
    # CILogon openid claims
    auth_request_set $auth_resp_x_vouch_idp_claims_sub $upstream_http_x_vouch_idp_claims_sub;
    auth_request_set $auth_resp_x_vouch_idp_claims_iss $upstream_http_x_vouch_idp_claims_iss;
    auth_request_set $auth_resp_x_vouch_idp_claims_aud $upstream_http_x_vouch_idp_claims_aud;
    auth_request_set $auth_resp_x_vouch_idp_claims_token_id $upstream_http_x_vouch_idp_claims_token_id;

    # CILogon email claim
    auth_request_set $auth_resp_x_vouch_idp_claims_email $upstream_http_x_vouch_idp_claims_email;

    # CILogon profile claims
    auth_request_set $auth_resp_x_vouch_idp_claims_given_name $upstream_http_x_vouch_idp_claims_given_name;
    auth_request_set $auth_resp_x_vouch_idp_claims_family_name $upstream_http_x_vouch_idp_claims_family_name;
    auth_request_set $auth_resp_x_vouch_idp_claims_name $upstream_http_x_vouch_idp_claims_name;

    # optinally add X-Vouch-IdP-AccessToken or X-Vouch-IdP-IdToken
    auth_request_set $auth_resp_x_vouch_idp_accesstoken $upstream_http_x_vouch_idp_accesstoken;
    auth_request_set $auth_resp_x_vouch_idp_idtoken $upstream_http_x_vouch_idp_idtoken;

    # these return values are used by the @error401 call
    auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
    auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
    auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
  }

  # if validate returns `401 not authorized` then forward the request to the error401block
  error_page 401 = @error401;

  location @error401 {
    # redirect to Vouch Proxy for login
    return 302 http://$host:9090/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
    # you usually *want* to redirect to Vouch running behind the same Nginx config proteced by https
    # but to get started you can just forward the end user to the port that vouch is running on
  }

  # proxy pass authorized requests to your service
  location / {
    # forward authorized requests to your service protectedapp.yourdomain.com
    proxy_pass http://app:5000/;

    ### AUTH REQUEST SET ###
    # you may need to set these variables in this block as per https://github.com/vouch/vouch-proxy/issues/26#issuecomment-425215810
    auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

    # CILogon openid claims
    auth_request_set $auth_resp_x_vouch_idp_claims_sub $upstream_http_x_vouch_idp_claims_sub;
    auth_request_set $auth_resp_x_vouch_idp_claims_iss $upstream_http_x_vouch_idp_claims_iss;
    auth_request_set $auth_resp_x_vouch_idp_claims_aud $upstream_http_x_vouch_idp_claims_aud;
    auth_request_set $auth_resp_x_vouch_idp_claims_token_id $upstream_http_x_vouch_idp_claims_token_id;

    # CILogon email claim
    auth_request_set $auth_resp_x_vouch_idp_claims_email $upstream_http_x_vouch_idp_claims_email;

    # CILogon profile claims
    auth_request_set $auth_resp_x_vouch_idp_claims_given_name $upstream_http_x_vouch_idp_claims_given_name;
    auth_request_set $auth_resp_x_vouch_idp_claims_family_name $upstream_http_x_vouch_idp_claims_family_name;
    auth_request_set $auth_resp_x_vouch_idp_claims_name $upstream_http_x_vouch_idp_claims_name;

    # optionally pass the accesstoken or idtoken
    auth_request_set $auth_resp_x_vouch_idp_accesstoken $upstream_http_x_vouch_idp_accesstoken;
    auth_request_set $auth_resp_x_vouch_idp_idtoken $upstream_http_x_vouch_idp_idtoken;

    ### PROXY SET HEADER ###
    # optionally pass any custom claims you are tracking
    # set user header (usually an email)
    proxy_set_header X-Vouch-User $auth_resp_x_vouch_user;

    # CILogon openid claims
    proxy_set_header X-Vouch-IdP-Claims-Sub $auth_resp_x_vouch_idp_claims_sub;
    proxy_set_header X-Vouch-IdP-Claims-Iss $auth_resp_x_vouch_idp_claims_iss;
    proxy_set_header X-Vouch-IdP-Claims-Aud $auth_resp_x_vouch_idp_claims_aud;
    proxy_set_header X-Vouch-IdP-Claims-Token_Id $auth_resp_x_vouch_idp_claims_token_id;

    # CILogon email claim
    proxy_set_header X-Vouch-IdP-Claims-Email $auth_resp_x_vouch_idp_claims_email;

    # CILogon profile claims
    proxy_set_header X-Vouch-IdP-Claims-Given_Name $auth_resp_x_vouch_idp_claims_given_name;
    proxy_set_header X-Vouch-IdP-Claims-Family_Name $auth_resp_x_vouch_idp_claims_family_name;
    proxy_set_header X-Vouch-IdP-Claims-Name $auth_resp_x_vouch_idp_claims_name;

    # optionally pass the accesstoken or idtoken
    proxy_set_header X-Vouch-IdP-AccessToken $auth_resp_x_vouch_idp_accesstoken;
    proxy_set_header X-Vouch-IdP-IdToken $auth_resp_x_vouch_idp_idtoken;
  }
}

server {
  listen 80 default_server;
  server_name $host;
  location / {
    # for example purposes http traffic is not being rerouted to the vouch proxy service
    proxy_pass http://app:5000/;
    #proxy_pass http://127.0.0.1:9090;
    # be sure to pass the original host header
    proxy_set_header Host $host;
  }
}